---
title: "ODE benchmark: R, Python and Julia"
date: 2024-12-17
categories:
  - R
execute:
  cache: false
---

```{r}
#| label: init
#| cache: false
#| message: false
library('tidyverse')

library('reticulate')
use_condaenv('sbloggel')

library('JuliaCall')
julia_setup(JULIA_HOME = '/Users/seb/.juliaup/bin/')

set.seed(1)
```

## R
```{r}
#| label: R
library('microbenchmark')
library('deSolve')
library('tidyverse')

p <- list(Pz = 34451, 
          Kz = 2274, 
          Pxy = 0.118, 
          Pyx = 0.721, 
          TKI = 0.742, 
          Py = 0.05, 
          Ky = 1e6, 
          m = 1e-4, 
          rz = 200, 
          a = 2, 
          b = 0, 
          e = 2, 
          d = 1,
          X0 = 1110861, 
          Y0 = 181818, 
          Z0 = 110)

deriv <- function(time, state, parameters) {
  with(as.list(c(state, parameters)), {
    dX <- Pyx * Y - Pxy * X
    dY <- Pxy * X - Pyx * Y + Py * (1 - Y / Ky) * Y - m * Z * Y - d * TKI * Y
    dZ <- rz + Z * Pz * (Y / (Kz ^ 2 + Y ^ 2)) - a * Z
    return(list(c(dX, dY, dZ)))
  })
}

sim_cml <- function() {
  ode(y = c(X = p$X0, Y = p$Y0, Z = p$Z0),
      times = seq(0, 100),
      func = deriv,
      parms = p)
}

microbenchmark(sim_cml())

sim_result <- sim_cml()

sim_result |> 
  unclass() |> 
  as_tibble() |> 
  pivot_longer(cols = -time) |> 
  ggplot(aes(time, value, color = name)) + 
  geom_line() +
  scale_y_continuous(trans = 'log10')

```

## Python
```{python}
#| label: python
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import pandas as pd
import plotnine as p9
import timeit

p = (34451, 2274, 0.118, 0.721, 0.742, 0.05, 1e6, 1e-4, 200, 2, 0, 2, 1)
y0 = (1110861, 181818, 110)
t = np.linspace(0, 100, 101)

def deriv(y, t, *params):
  X, Y, Z = y
  Pz, Kz, Pxy, Pyx, TKI, Py, Ky, m, rz, a, b, e, d = params
  dX = Pyx * Y - Pxy * X
  dY = Pxy * X - Pyx * Y + Py * (1 - Y / Ky) * Y - m * Z * Y - d * TKI * Y
  dZ = rz + Z * Pz * (Y / (Kz ** 2 + Y ** 2)) - a * Z
  return dX, dY, dZ

def sim_cml():
  return odeint(deriv, y0, t, args=p)

x = timeit.repeat('sim_cml()', repeat=100, number=1, globals=globals())
print('Mean:', np.mean(x) * 1000, 'ms\nMin: ', np.min(x) * 1000, 'ms\nMax: ', np.max(x) * 1000, 'ms')

sol = sim_cml()


df = pd.DataFrame(sol, columns = ['X', 'Y', 'Z'])
df['t'] = t
df_long = pd.melt(df, 
                  id_vars = ['t'], 
                  value_vars = ['X', 'Y', 'Z'],
                  value_name = 'cell_count')


(
  p9.ggplot(df_long, p9.aes('t', 'cell_count', colour='variable')) + 
  p9.geom_line() + 
  p9.scale_y_continuous(trans='log10') +
  p9.labs(y='Cell count', color = 'Compartment')
)


```

## Julia
```{julia}
#| label: julia
using DifferentialEquations
using Plots
using BenchmarkTools


function cml_model!(du, u, p, t)
    X, Y, Z = u
    Pz, Kz, Pxy, Pyx, TKI, Py, Ky, m, rz, a, b, e, d = p
    du[1] = Pyx * Y - Pxy * X
    du[2] = Pxy * X - Pyx * Y + Py * (1 - Y / Ky) * Y - m * Z * Y - d * TKI * Y
    du[3] = rz + Z * Pz * (Y / (Kz^2 + Y^2)) - a * Z
    end

p = [34451, 2274, 0.118, 0.721, 0.742, 0.05, 1e6, 1e-4, 200, 2, 0, 2, 1];
u_0 = [1110861, 181818, 110];
tspan = (0.0, 100.0);


prob = ODEProblem(cml_model!, u_0, tspan, p);
@benchmark solve(prob, Tsit5()) samples=100;

sol = solve(prob, Tsit5());

plot(sol, xlabel="Time", ylabel="Cell counts", legend=:right, lw=2, yscale=:log10, primary=false);
plot!(sol.t, sol[1,:], label="X", color=:blue);
plot!(sol.t, sol[2,:], label="Y", color=:red);
plot!(sol.t, sol[3,:], label="Z", color=:green)
```

## Accessing Python and Julia results from R
```{r}
julia_eval('sol')
py$df_long |> glimpse()
```


## Conclusion
* Execution time roughly
  * Times:
    * 8 ms n R
    * 4 ms in Python
    * 0.08 ms in Julia
  * Hence Julia approx 100x faster than R and 50x faster than Python!
* Calculation results from Python and Julia can easily be accessed in R!


